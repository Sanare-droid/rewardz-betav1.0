rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isValidReport() {
      return request.resource.data.keys().hasAll(['type', 'species', 'location', 'userId']) &&
             request.resource.data.type in ['lost', 'found'] &&
             request.resource.data.species is string &&
             request.resource.data.location is string;
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if true; // Public profiles
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false; // Prevent accidental deletion
      
      // User's pets subcollection
      match /pets/{petId} {
        allow read: if true; // Public pet profiles
        allow write: if isOwner(userId);
      }
      
      // User's saved searches
      match /savedSearches/{searchId} {
        allow read, write: if isOwner(userId);
      }
    }
    
    // Reports collection (lost/found pets)
    match /reports/{reportId} {
      allow read: if true; // All reports are public
      allow create: if isAuthenticated() && isValidReport();
      allow update: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || 
         request.auth.token.admin == true);
      allow delete: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || 
         request.auth.token.admin == true);
      
      // Messages subcollection for each report
      match /messages/{messageId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && 
          request.resource.data.keys().hasAll(['userId', 'content', 'createdAt']);
        allow update: if isAuthenticated() && 
          (resource.data.userId == request.auth.uid || 
           // Allow marking messages as read by recipient
           (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead', 'readAt'])));
        allow delete: if resource.data.userId == request.auth.uid;
      }
      
      // Matches subcollection
      match /matches/{matchId} {
        allow read: if isAuthenticated() && 
          (resource.data.lostReportUserId == request.auth.uid || 
           resource.data.foundReportUserId == request.auth.uid);
        allow create: if isAuthenticated();
        allow update: if false; // Matches are immutable once created
        allow delete: if false;
      }
    }
    
    // Community posts collection
    match /posts/{postId} {
      allow read: if true; // Public forum
      allow create: if isAuthenticated() && 
        request.resource.data.keys().hasAll(['authorId', 'content', 'createdAt']) &&
        request.resource.data.authorId == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.authorId == request.auth.uid;
      allow delete: if isAuthenticated() && 
        (resource.data.authorId == request.auth.uid || 
         request.auth.token.admin == true);
      
      // Comments subcollection
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isAuthenticated() && 
          request.resource.data.authorId == request.auth.uid;
        allow update: if isAuthenticated() && 
          resource.data.authorId == request.auth.uid;
        allow delete: if isAuthenticated() && 
          (resource.data.authorId == request.auth.uid || 
           request.auth.token.admin == true);
      }
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if false; // Only server can create notifications
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead', 'readAt']);
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }
    
    // Admin collection (for system settings)
    match /admin/{document} {
      allow read: if true; // Public settings
      allow write: if isAuthenticated() && 
        request.auth.token.admin == true;
    }
  }
}